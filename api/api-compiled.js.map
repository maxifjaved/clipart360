{"version":3,"sources":["api.js"],"names":[],"mappings":"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","file":"api-compiled.js","sourcesContent":["import express from 'express';\nimport session from 'express-session';\nimport bodyParser from 'body-parser';\nimport config from '../src/config';\nimport * as actions from './actions/index';\nimport {mapUrl} from 'utils/url.js';\nimport PrettyError from 'pretty-error';\nimport http from 'http';\nimport SocketIo from 'socket.io';\n\nconst pretty = new PrettyError();\nconst app = express();\n\nconst server = new http.Server(app);\n\nconst io = new SocketIo(server);\nio.path('/ws');\n\napp.use(session({\n  secret: 'react and redux rule!!!!',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { maxAge: 60000 }\n}));\napp.use(bodyParser.json());\n\n\napp.use((req, res) => {\n  const splittedUrlPath = req.url.split('?')[0].split('/').slice(1);\n\n  const {action, params} = mapUrl(actions, splittedUrlPath);\n  if (action) {\n    action(req, params)\n      .then((result) => {\n        if (result instanceof Function) {\n          result(res);\n        } else {\n          res.json(result);\n        }\n      }, (reason) => {\n        if (reason && reason.redirect) {\n          res.redirect(reason.redirect);\n        } else {\n          console.error('API ERROR:', pretty.render(reason));\n          res.status(reason.status || 500).json(reason);\n        }\n      });\n  } else {\n    res.status(404).end('NOT FOUND');\n  }\n});\n\n\nconst bufferSize = 100;\nconst messageBuffer = new Array(bufferSize);\nlet messageIndex = 0;\n\nif (config.apiPort) {\n  const runnable = app.listen(config.apiPort, (err) => {\n    if (err) {\n      console.error(err);\n    }\n    console.info('----\\n==> ðŸŒŽ  API is running on port %s', config.apiPort);\n    console.info('==> ðŸ’»  Send requests to http://%s:%s', config.apiHost, config.apiPort);\n  });\n\n  io.on('connection', (socket) => {\n    socket.emit('news', {msg: `'Hello World!' from server`});\n\n    socket.on('history', () => {\n      for (let index = 0; index < bufferSize; index++) {\n        const msgNo = (messageIndex + index) % bufferSize;\n        const msg = messageBuffer[msgNo];\n        if (msg) {\n          socket.emit('msg', msg);\n        }\n      }\n    });\n\n    socket.on('msg', (data) => {\n      data.id = messageIndex;\n      messageBuffer[messageIndex % bufferSize] = data;\n      messageIndex++;\n      io.emit('msg', data);\n    });\n  });\n  io.listen(runnable);\n} else {\n  console.error('==>     ERROR: No PORT environment variable has been specified');\n}\n"]}