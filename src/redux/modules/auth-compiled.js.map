{"version":3,"sources":["auth.js"],"names":[],"mappings":";;;;;;;;;;kBAcwB,O;QA6DR,Q,GAAA,Q;QAIA,I,GAAA,I;QAOA,K,GAAA,K;QAWA,M,GAAA,M;;;;AAjGhB,IAAM,OAAO,yBAAb;AACA,IAAM,eAAe,iCAArB;AACA,IAAM,YAAY,8BAAlB;AACA,IAAM,QAAQ,0BAAd;AACA,IAAM,gBAAgB,kCAAtB;AACA,IAAM,aAAa,+BAAnB;AACA,IAAM,SAAS,2BAAf;AACA,IAAM,iBAAiB,mCAAvB;AACA,IAAM,cAAc,gCAApB;;AAEA,IAAM,eAAe;AACnB,UAAQ;AADW,CAArB;;AAIe,SAAS,OAAT,GAAoD;AAAA,MAAnC,KAAmC,uEAA3B,YAA2B;AAAA,MAAb,MAAa,uEAAJ,EAAI;;AACjE,UAAQ,OAAO,IAAf;AACE,SAAK,IAAL;AACE,wCACK,KADL;AAEE,iBAAS;AAFX;AAIF,SAAK,YAAL;AACE,wCACK,KADL;AAEE,iBAAS,KAFX;AAGE,gBAAQ,IAHV;AAIE,cAAM,OAAO;AAJf;AAMF,SAAK,SAAL;AACE,wCACK,KADL;AAEE,iBAAS,KAFX;AAGE,gBAAQ,KAHV;AAIE,eAAO,OAAO;AAJhB;AAMF,SAAK,KAAL;AACE,wCACK,KADL;AAEE,mBAAW;AAFb;AAIF,SAAK,aAAL;AACE,wCACK,KADL;AAEE,mBAAW,KAFb;AAGE,cAAM,OAAO;AAHf;AAKF,SAAK,UAAL;AACE,wCACK,KADL;AAEE,mBAAW,KAFb;AAGE,cAAM,IAHR;AAIE,oBAAY,OAAO;AAJrB;AAMF,SAAK,MAAL;AACE,wCACK,KADL;AAEE,oBAAY;AAFd;AAIF,SAAK,cAAL;AACE,wCACK,KADL;AAEE,oBAAY,KAFd;AAGE,cAAM;AAHR;AAKF,SAAK,WAAL;AACE,wCACK,KADL;AAEE,oBAAY,KAFd;AAGE,qBAAa,OAAO;AAHtB;AAKF;AACE,aAAO,KAAP;AAxDJ;AA0DD;;AAEM,SAAS,QAAT,CAAkB,WAAlB,EAA+B;AACpC,SAAO,YAAY,IAAZ,IAAoB,YAAY,IAAZ,CAAiB,MAA5C;AACD;;AAEM,SAAS,IAAT,GAAgB;AACrB,SAAO;AACL,WAAO,CAAC,IAAD,EAAO,YAAP,EAAqB,SAArB,CADF;AAEL,aAAS,iBAAC,MAAD;AAAA,aAAY,OAAO,GAAP,CAAW,WAAX,CAAZ;AAAA;AAFJ,GAAP;AAID;;AAEM,SAAS,KAAT,CAAe,IAAf,EAAqB;AAC1B,SAAO;AACL,WAAO,CAAC,KAAD,EAAQ,aAAR,EAAuB,UAAvB,CADF;AAEL,aAAS,iBAAC,MAAD;AAAA,aAAY,OAAO,IAAP,CAAY,QAAZ,EAAsB;AACzC,cAAM;AACJ,gBAAM;AADF;AADmC,OAAtB,CAAZ;AAAA;AAFJ,GAAP;AAQD;;AAEM,SAAS,MAAT,GAAkB;AACvB,SAAO;AACL,WAAO,CAAC,MAAD,EAAS,cAAT,EAAyB,WAAzB,CADF;AAEL,aAAS,iBAAC,MAAD;AAAA,aAAY,OAAO,GAAP,CAAW,SAAX,CAAZ;AAAA;AAFJ,GAAP;AAID","file":"auth-compiled.js","sourcesContent":["const LOAD = 'redux-example/auth/LOAD';\nconst LOAD_SUCCESS = 'redux-example/auth/LOAD_SUCCESS';\nconst LOAD_FAIL = 'redux-example/auth/LOAD_FAIL';\nconst LOGIN = 'redux-example/auth/LOGIN';\nconst LOGIN_SUCCESS = 'redux-example/auth/LOGIN_SUCCESS';\nconst LOGIN_FAIL = 'redux-example/auth/LOGIN_FAIL';\nconst LOGOUT = 'redux-example/auth/LOGOUT';\nconst LOGOUT_SUCCESS = 'redux-example/auth/LOGOUT_SUCCESS';\nconst LOGOUT_FAIL = 'redux-example/auth/LOGOUT_FAIL';\n\nconst initialState = {\n  loaded: false\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case LOAD:\n      return {\n        ...state,\n        loading: true\n      };\n    case LOAD_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        user: action.result\n      };\n    case LOAD_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error\n      };\n    case LOGIN:\n      return {\n        ...state,\n        loggingIn: true\n      };\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        loggingIn: false,\n        user: action.result\n      };\n    case LOGIN_FAIL:\n      return {\n        ...state,\n        loggingIn: false,\n        user: null,\n        loginError: action.error\n      };\n    case LOGOUT:\n      return {\n        ...state,\n        loggingOut: true\n      };\n    case LOGOUT_SUCCESS:\n      return {\n        ...state,\n        loggingOut: false,\n        user: null\n      };\n    case LOGOUT_FAIL:\n      return {\n        ...state,\n        loggingOut: false,\n        logoutError: action.error\n      };\n    default:\n      return state;\n  }\n}\n\nexport function isLoaded(globalState) {\n  return globalState.auth && globalState.auth.loaded;\n}\n\nexport function load() {\n  return {\n    types: [LOAD, LOAD_SUCCESS, LOAD_FAIL],\n    promise: (client) => client.get('/loadAuth')\n  };\n}\n\nexport function login(name) {\n  return {\n    types: [LOGIN, LOGIN_SUCCESS, LOGIN_FAIL],\n    promise: (client) => client.post('/login', {\n      data: {\n        name: name\n      }\n    })\n  };\n}\n\nexport function logout() {\n  return {\n    types: [LOGOUT, LOGOUT_SUCCESS, LOGOUT_FAIL],\n    promise: (client) => client.get('/logout')\n  };\n}\n"]}